# -*- coding: utf-8 -*-
"""DeepLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d-y19PhnF8mhxoyFZVn3K-DERmA5Kr8a
"""

#import modules
from keras.layers import Conv2D , Dense , Flatten, MaxPooling2D , Dropout
import matplotlib.pyplot as plt
import pandas as pd
import os
from PIL import Image
from tensorflow.keras.applications.xception import decode_predictions
import tensorflow as tf
import keras
from keras import layers

from google.colab import drive
drive.mount('/content/drive')

!git clone https://github.com/alexeygrigorev/clothing-dataset-small

# Commented out IPython magic to ensure Python compatibility.
# %cd clothing-dataset-small

test='/content/clothing-dataset-small/test'
train="/content/clothing-dataset-small/train"
validation="/content/clothing-dataset-small/validation"

##Data Filtering
!rm -rf /content/clothing-dataset-small/train/skirt
!rm -rf /content/clothing-dataset-small/train/longsleeve
!rm -rf /content/clothing-dataset-small/train/shorts
!rm -rf /content/clothing-dataset-small/train/outwear
!rm -rf /content/clothing-dataset-small/train/hat
!rm -rf /content/clothing-dataset-small/validation/skirt
!rm -rf /content/clothing-dataset-small/validation/longsleeve
!rm -rf /content/clothing-dataset-small/validation/shorts
!rm -rf /content/clothing-dataset-small/validation/outwear
!rm -rf /content/clothing-dataset-small/validation/hat
!rm -rf /content/clothing-dataset-small/test/longsleeve
!rm -rf /content/clothing-dataset-small/test/shorts
!rm -rf /content/clothing-dataset-small/test/outwear
!rm -rf /content/clothing-dataset-small/test/hat
!rm -rf /content/clothing-dataset-small/test/.ipynb_checkpoints
!rm -rf /content/clothing-dataset-small/test/skirt

from tensorflow.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(rescale= 1./255)
train_data = datagen.flow_from_directory(
    train,
    target_size = (299,299),
    batch_size=16,
)
print("classes:", train_data.class_indices)
img, labels = train_data.next()

test_data = datagen.flow_from_directory(
    test,
    target_size = (299,299),
    batch_size=16
)
print("classes:", test_data.class_indices)
img, labels = test_data.next()

validation_data = datagen.flow_from_directory(
    validation,
    target_size = (299,299),
    batch_size=16)
print("classes:", validation_data.class_indices)
img, labels = validation_data.next()

import numpy as np
#defining the number of classes
num_classes=5

tshirt = Image.open("/content/clothing-dataset-small/train/t-shirt/00003aeb-ace5-43bf-9a0c-dc31a03e9cd2.jpg")
tshirt = tshirt.resize((500,500), resample=Image.NEAREST)
tshirt

from tensorflow.keras import Sequential
def clothes (dr = 0.2 , lr = 0.001 , act = "relu"):
  model=Sequential()
  model.add(Conv2D(64, (3,3),
                   activation= act))
  model.add(MaxPooling2D(pool_size=(2,2)))
  model.add(Conv2D(128, (3,3),
                   activation=act))
  model.add(MaxPooling2D(pool_size=(2,2)))
  model.add(Conv2D(256, (3,3),
                   activation= act))
  model.add(MaxPooling2D(pool_size=(2,2)))




  # Flatten the input data
  model.add(Flatten())
  #Adding Dense Layer and Dropout Layer
  model.add(Dense(256, activation= act))
  model.add(Dropout(dr))

  model.add(Dense(128, activation= act))
  model.add(Dropout(dr))

  model.add(Dense(64, activation=act))
  model.add(Dropout(dr))

  # Add output layer
  model.add(Dense(num_classes, activation='softmax'))


  #Compile the model
  model.compile(loss='categorical_crossentropy',
                optimizer=keras.optimizers.Adam(lr),
                metrics=['accuracy'])

  return model



model=clothes()
epochs = 10
history = model.fit(train_data, batch_size=10, epochs=epochs, validation_data=validation_data)

# Evaluate the model
scores = model.evaluate(test_data, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])

predictions = model.predict(test_data)
print(predictions)

#getting an idea of the labels
labels

!pip install gradio

import gradio as gr

name = train_data.class_indices.keys()
name

def predict_img(img):
  img_3d = img.reshape(-1,299,299,3)
  pridiction = model.predict(img_3d)[0]
  return {name[i]: float(pridiction[i]) for i in range(5)}

image = gr.inputs.Image(shape=(299,299))
label = gr.outputs.Label(num_top_classes=5)

web=gr.Interface(fn= predict_img,inputs= image, outputs= label , capture_session = True)
web.launch(share ='True' )